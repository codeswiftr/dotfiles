#!/usr/bin/env bash

# ============================================================================
# Dotfiles Interactive Tutorial - Similar to vimtutor
# Learn your modern development environment hands-on!
# ============================================================================

set -e

# Colors and styling
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Emojis
ROCKET="🚀"
GEAR="⚙️"
AI="🤖"
TERMINAL="💻"
FILES="📁"
SUCCESS="✅"
PRACTICE="🎯"
TIP="💡"
WARNING="⚠️"

# Tutorial state
TUTORIAL_DIR="$HOME/.dotfiles-tutorial"
CURRENT_LESSON=""
COMPLETED_LESSONS=()

# ============================================================================
# Utility Functions
# ============================================================================

print_header() {
    clear
    echo -e "${BLUE}${BOLD}"
    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
    echo "║                      ${ROCKET} DOTFILES INTERACTIVE TUTORIAL ${ROCKET}                      ║"
    echo "║                        Learn Your Dev Environment!                          ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

print_lesson_header() {
    local lesson_title="$1"
    echo -e "${CYAN}${BOLD}"
    echo "┌────────────────────────────────────────────────────────────────────────────┐"
    echo "│ $lesson_title"
    echo "└────────────────────────────────────────────────────────────────────────────┘"
    echo -e "${NC}"
}

print_step() {
    local step_num="$1"
    local description="$2"
    echo -e "${YELLOW}${BOLD}Step $step_num:${NC} $description"
}

print_command() {
    local command="$1"
    echo -e "${GREEN}${BOLD}  $ $command${NC}"
}

print_tip() {
    local tip="$1"
    echo -e "${BLUE}${TIP} ${BOLD}Tip:${NC} $tip"
}

print_success() {
    local message="$1"
    echo -e "${GREEN}${SUCCESS} $message${NC}"
}

print_warning() {
    local message="$1"
    echo -e "${YELLOW}${WARNING} $message${NC}"
}

wait_for_enter() {
    echo -e "\n${BOLD}Press ENTER to continue...${NC}"
    read -r
}

wait_for_command() {
    local expected_command="$1"
    local hint="$2"
    
    while true; do
        echo -e "${BOLD}Your turn! Type the command:${NC}"
        read -r user_input
        
        # Normalize whitespace for comparison
        local normalized_input=$(echo "$user_input" | xargs)
        local normalized_expected=$(echo "$expected_command" | xargs)
        
        if [[ "$normalized_input" == "$normalized_expected" ]]; then
            print_success "Correct! Well done."
            break
        else
            echo -e "${RED}Not quite right. $hint${NC}"
            echo -e "${YELLOW}Expected: $expected_command${NC}"
            
            # Provide specific feedback
            if [[ "$user_input" =~ ^[[:space:]]*$ ]]; then
                echo -e "${BLUE}${TIP} You didn't enter anything. Try typing the command above.${NC}"
            elif [[ ${#user_input} -lt ${#expected_command} ]]; then
                echo -e "${BLUE}${TIP} Your command seems incomplete. Double-check the spelling.${NC}"
            else
                echo -e "${BLUE}${TIP} Check for typos or extra characters.${NC}"
            fi
        fi
    done
}

create_practice_environment() {
    print_step "1" "Setting up practice environment..."
    
    # Create tutorial directory structure
    mkdir -p "$TUTORIAL_DIR"/{practice,projects/{python-app,js-app,swift-app},scripts}
    cd "$TUTORIAL_DIR"
    
    # Create sample files
    cat > practice/hello.py << 'EOF'
def greet(name):
    """A simple greeting function."""
    return f"Hello, {name}!"

def main():
    name = input("What's your name? ")
    print(greet(name))

if __name__ == "__main__":
    main()
EOF

    cat > practice/app.js << 'EOF'
// Simple JavaScript application
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
    res.send('Hello from Node.js!');
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
EOF

    cat > practice/README.md << 'EOF'
# Practice Files

This directory contains sample files for the dotfiles tutorial.

## Files:
- `hello.py` - Simple Python script
- `app.js` - Basic Node.js application
- `notes.txt` - Sample text file

## Practice Commands:
Try using the modern CLI tools to explore these files!
EOF

    cat > practice/notes.txt << 'EOF'
Welcome to the Dotfiles Tutorial!

These are sample notes to practice with.
You can use bat, eza, rg, and other tools to explore this content.

Some keywords to search for:
- tutorial
- practice
- modern
- development
EOF

    # Create project structure
    echo "# Python Project" > projects/python-app/README.md
    echo "print('Python project')" > projects/python-app/main.py
    
    echo "# JavaScript Project" > projects/js-app/README.md
    echo "console.log('JS project');" > projects/js-app/index.js
    
    echo "# Swift Project" > projects/swift-app/README.md
    echo "print(\"Swift project\")" > projects/swift-app/main.swift
    
    print_success "Practice environment created at $TUTORIAL_DIR"
}

# ============================================================================
# Tutorial Lessons
# ============================================================================

lesson_01_welcome() {
    print_header
    print_lesson_header "Lesson 1: Welcome to Your Modern Development Environment"
    
    echo -e "Welcome to the ${BOLD}Dotfiles Interactive Tutorial!${NC}"
    echo ""
    echo "This tutorial will teach you how to use your modern development environment"
    echo "with hands-on exercises, just like vimtutor."
    echo ""
    echo -e "${BOLD}What you'll learn:${NC}"
    echo "• Modern CLI tools (eza, bat, rg, fd, fzf)"
    echo "• AI-powered development workflows"
    echo "• Multi-pane navigation in Neovim"
    echo "• Tmux session management"
    echo "• Project switching and organization"
    echo "• Efficient development workflows"
    echo ""
    echo -e "${BOLD}Prerequisites:${NC}"
    echo "• Dotfiles installed and configured"
    echo "• Terminal with zsh shell"
    echo "• About 30 minutes of time"
    echo ""
    
    wait_for_enter
    create_practice_environment
    wait_for_enter
}

lesson_02_modern_cli() {
    print_header
    print_lesson_header "Lesson 2: Modern CLI Tools - Replace the Classics"
    
    echo "Your dotfiles replace traditional Unix tools with modern alternatives."
    echo "Let's explore the practice directory to see them in action!"
    echo ""
    
    print_step "1" "Navigate to the practice directory"
    print_command "cd $TUTORIAL_DIR/practice"
    echo ""
    echo "Traditional: cd"
    echo "Modern: Also use 'z' for smart navigation (we'll cover this later)"
    
    wait_for_command "cd $TUTORIAL_DIR/practice" "Remember: cd $TUTORIAL_DIR/practice"
    
    print_step "2" "List files with eza (modern ls)"
    print_command "eza --icons --git -la"
    echo ""
    echo "Traditional: ls -la"
    echo "Modern: eza shows icons, git status, and better formatting"
    
    wait_for_command "eza --icons --git -la" "Try: eza --icons --git -la"
    
    echo ""
    print_tip "Your .zshrc aliases 'ls' to 'eza --icons --git' automatically!"
    echo ""
    
    print_step "3" "View file contents with bat (modern cat)"
    print_command "bat hello.py"
    echo ""
    echo "Traditional: cat hello.py"
    echo "Modern: bat adds syntax highlighting, line numbers, and git integration"
    
    wait_for_command "bat hello.py" "Try: bat hello.py"
    
    print_step "4" "Search file contents with ripgrep (modern grep)"
    print_command "rg \"greet\" ."
    echo ""
    echo "Traditional: grep -r \"greet\" ."
    echo "Modern: rg is faster and shows better output"
    
    wait_for_command "rg \"greet\" ." "Try: rg \"greet\" ."
    
    print_step "5" "Find files with fd (modern find)"
    print_command "fd \\.py"
    echo ""
    echo "Traditional: find . -name \"*.py\""
    echo "Modern: fd has simpler syntax and respects .gitignore"
    
    wait_for_command "fd \\.py" "Try: fd \\.py"
    
    print_success "Excellent! You've mastered the modern CLI tools."
    echo ""
    print_tip "These tools are aliased in your .zshrc, so 'ls', 'cat', 'grep', and 'find' use the modern versions!"
    
    wait_for_enter
}

lesson_03_smart_navigation() {
    print_header
    print_lesson_header "Lesson 3: Smart Navigation with Zoxide and FZF"
    
    echo "Navigate directories like a pro with smart tools!"
    echo ""
    
    print_step "1" "Jump around with zoxide (aliased as 'z')"
    print_command "z tutorial"
    echo ""
    echo "Zoxide learns your frequently visited directories."
    echo "You can jump to them with partial names!"
    
    wait_for_command "z tutorial" "Try: z tutorial (should take you to the tutorial directory)"
    
    print_step "2" "Use 'j' alias for zoxide (same as 'z')"
    print_command "j practice"
    echo ""
    echo "Both 'z' and 'j' work the same way."
    
    wait_for_command "j practice" "Try: j practice"
    
    print_step "3" "Fuzzy find files with fzf"
    print_command "find . -type f | fzf"
    echo ""
    echo "Use arrow keys to navigate, ENTER to select, ESC to cancel."
    echo "Try typing parts of filenames to filter!"
    
    echo "Press ENTER when ready to try fzf..."
    read -r
    find . -type f | fzf
    
    print_step "4" "Enhanced fzf with preview"
    print_command "fd . | fzf --preview 'bat --color=always {}'"
    echo ""
    echo "This shows file contents as you navigate!"
    
    echo "Press ENTER when ready to try enhanced fzf..."
    read -r
    fd . | fzf --preview 'bat --color=always {}'
    
    print_success "Smart navigation mastered!"
    echo ""
    print_tip "Your .zshrc has FZF configured with previews by default!"
    
    wait_for_enter
}

lesson_04_project_management() {
    print_header
    print_lesson_header "Lesson 4: Project Management and Switching"
    
    echo "Efficiently manage and switch between projects!"
    echo ""
    
    print_step "1" "Use the project switcher function"
    print_command "proj"
    echo ""
    echo "This function finds projects in ~/work and ~/projects"
    echo "and lets you switch with a fuzzy finder."
    echo ""
    echo "Since we're in tutorial mode, let's navigate to our projects manually:"
    
    wait_for_command "cd $TUTORIAL_DIR/projects" "Try: cd $TUTORIAL_DIR/projects"
    
    print_step "2" "Explore the project structure"
    print_command "eza --tree"
    echo ""
    echo "The tree view shows the project structure clearly."
    
    wait_for_command "eza --tree" "Try: eza --tree"
    
    print_step "3" "Navigate to a Python project"
    print_command "cd python-app"
    echo ""
    echo "Notice how your dotfiles can detect project types!"
    
    wait_for_command "cd python-app" "Try: cd python-app"
    
    print_step "4" "Check project type detection"
    print_command "ls -la"
    echo ""
    echo "Your shell can detect Python projects and auto-configure the environment."
    
    wait_for_command "ls -la" "Try: ls -la"
    
    print_success "Project management skills acquired!"
    echo ""
    print_tip "The 'proj' function works best when you have projects in ~/work or ~/projects directories!"
    
    wait_for_enter
}

lesson_05_ai_integration() {
    print_header
    print_lesson_header "Lesson 5: AI-Powered Development Workflows"
    
    echo "Leverage AI assistants for enhanced productivity!"
    echo ""
    
    print_step "1" "AI analysis function"
    echo "Your dotfiles include powerful AI integration functions."
    echo "Let's explore some of them:"
    echo ""
    print_command "ai-find \"greet\""
    echo ""
    echo "This searches for text and lets you select files with fzf."
    
    cd "$TUTORIAL_DIR/practice"
    
    print_step "2" "Try the AI search function"
    echo "This will search for 'greet' in files and show results:"
    
    wait_for_command "ai-find \"greet\"" "Try: ai-find \"greet\""
    
    print_step "3" "Code explanation helper"
    print_command "explain hello.py"
    echo ""
    echo "This would send the file to Claude Code for explanation."
    echo "(Requires Claude Code CLI to be installed separately)"
    
    echo "For now, let's simulate by viewing the file:"
    wait_for_command "bat hello.py" "Try: bat hello.py (simulating explanation)"
    
    print_step "4" "AI commit message generation"
    echo "Your dotfiles can generate commit messages!"
    echo ""
    echo "First, let's stage a file:"
    print_command "git init && git add hello.py"
    
    wait_for_command "git init && git add hello.py" "Try: git init && git add hello.py"
    
    print_command "ai-commit"
    echo ""
    echo "This analyzes staged changes and suggests commit messages."
    echo "(Requires Claude Code CLI - we'll skip the actual execution)"
    
    print_success "AI integration concepts learned!"
    echo ""
    print_tip "Install Claude Code CLI and Gemini CLI separately to unlock full AI features!"
    
    wait_for_enter
}

lesson_06_tmux_sessions() {
    print_header
    print_lesson_header "Lesson 6: Tmux Session Management"
    
    echo "Master terminal multiplexing with tmux!"
    echo ""
    
    print_step "1" "List current tmux sessions"
    print_command "ts"
    echo ""
    echo "'ts' is aliased to 'tmux list-sessions'"
    
    wait_for_command "ts" "Try: ts (shows tmux sessions)"
    
    print_step "2" "Create a new named session"
    print_command "tn tutorial-session"
    echo ""
    echo "'tn' creates a new tmux session with the given name."
    
    wait_for_command "tn tutorial-session" "Try: tn tutorial-session"
    
    # Inside tmux now
    echo ""
    echo "You're now inside a tmux session!"
    echo ""
    echo -e "${BOLD}Tmux Key Bindings (Prefix = Ctrl+b):${NC}"
    echo "• Prefix + | : Vertical split"
    echo "• Prefix + - : Horizontal split"
    echo "• Prefix + h/j/k/l : Navigate panes"
    echo "• Prefix + d : Detach session"
    echo "• Prefix + A : AI development layout"
    echo ""
    
    print_step "3" "Try creating a vertical split"
    echo "Press: Ctrl+b, then |"
    echo "Press ENTER when you've created a split..."
    read -r
    
    print_step "4" "Navigate between panes"
    echo "Press: Ctrl+b, then h/j/k/l to move between panes"
    echo "Press ENTER when you've tried navigation..."
    read -r
    
    print_step "5" "Detach from session"
    echo "Press: Ctrl+b, then d"
    echo "This will detach and return you to the main shell."
    echo "Press ENTER when ready..."
    read -r
    
    print_success "Tmux session management learned!"
    echo ""
    print_tip "Use 'ta tutorial-session' to reattach to your session later!"
    
    wait_for_enter
}

lesson_07_neovim_navigation() {
    print_header
    print_lesson_header "Lesson 7: Neovim Multi-Pane Navigation"
    
    echo "Master advanced navigation in Neovim!"
    echo ""
    
    cd "$TUTORIAL_DIR/practice"
    
    print_step "1" "Open Neovim with a file"
    print_command "nvim hello.py"
    echo ""
    echo "This will open Neovim with the Python file."
    
    wait_for_command "nvim hello.py" "Try: nvim hello.py"
    
    echo ""
    echo "You're now in Neovim! Let's practice navigation:"
    echo ""
    echo -e "${BOLD}Basic Navigation (Normal Mode):${NC}"
    echo "• h/j/k/l : Move cursor left/down/up/right"
    echo "• <Space> : Leader key for custom commands"
    echo ""
    echo -e "${BOLD}Multi-Pane Commands:${NC}"
    echo "• <Leader>sv : Split vertically"
    echo "• <Leader>sh : Split horizontally"
    echo "• Ctrl+h/j/k/l : Navigate between panes"
    echo "• <Leader>wp : Window picker (visual selection)"
    echo ""
    echo -e "${BOLD}File Navigation:${NC}"
    echo "• <Leader>f : Fuzzy find files"
    echo "• <Leader>n : Toggle file explorer"
    echo "• <Leader>bb : Buffer list"
    echo ""
    echo "Try these commands in Neovim, then type :q to quit."
    echo "Press ENTER when you've experimented..."
    read -r
    
    print_success "Neovim navigation basics covered!"
    echo ""
    print_tip "Check NAVIGATION_GUIDE.md for complete keybinding reference!"
    
    wait_for_enter
}

lesson_08_development_workflow() {
    print_header
    print_lesson_header "Lesson 8: Complete Development Workflow"
    
    echo "Put it all together in a real development workflow!"
    echo ""
    
    cd "$TUTORIAL_DIR"
    
    print_step "1" "Start a tmux session for development"
    print_command "tm python-dev"
    echo ""
    echo "This creates a smart tmux session named 'python-dev'."
    
    wait_for_command "tm python-dev" "Try: tm python-dev"
    
    print_step "2" "Set up the development layout"
    echo "Inside tmux, create a development layout:"
    echo "• Prefix + | for vertical split"
    echo "• Navigate to practice directory in one pane"
    echo "• Keep shell in the other pane"
    echo ""
    echo "Press ENTER when you've set up your layout..."
    read -r
    
    print_step "3" "Open files in Neovim"
    echo "In one pane, open multiple files:"
    print_command "cd $TUTORIAL_DIR/practice && nvim hello.py app.js"
    echo ""
    echo "This opens multiple files in Neovim buffers."
    echo "Press ENTER to continue after trying..."
    read -r
    
    print_step "4" "Use AI helpers"
    echo "In the shell pane, try AI helper functions:"
    echo "• ai-find 'function' - Search for functions"
    echo "• explain filename - Explain code"
    echo "• ai-analyze overview - Analyze project"
    echo ""
    echo "Press ENTER when you've tried some commands..."
    read -r
    
    print_step "5" "Detach and reattach"
    echo "Detach from tmux (Prefix + d), then reattach:"
    print_command "ta python-dev"
    echo ""
    echo "Your entire session state is preserved!"
    
    wait_for_command "ta python-dev" "Try: ta python-dev"
    
    print_success "Complete development workflow mastered!"
    
    wait_for_enter
}

lesson_09_advanced_features() {
    print_header
    print_lesson_header "Lesson 9: Advanced Features and Tips"
    
    echo "Discover advanced features and productivity tips!"
    echo ""
    
    print_step "1" "Version management"
    print_command "df-version"
    echo ""
    echo "Check your dotfiles version and update status."
    
    wait_for_command "df-version" "Try: df-version"
    
    print_step "2" "Smart context switching"
    echo "Your shell detects project types automatically:"
    echo ""
    cd "$TUTORIAL_DIR/projects/python-app"
    print_command "pwd && echo 'Python project detected!'"
    
    wait_for_command "pwd && echo 'Python project detected!'" "Try the command above"
    
    print_step "3" "Multi-AI comparison"
    echo "Compare responses from different AI models:"
    print_command "ai-compare 'What is the best way to handle errors in Python?'"
    echo ""
    echo "(This requires both Claude Code CLI and Gemini CLI)"
    
    print_step "4" "Session persistence"
    echo "Your tmux sessions can be saved and restored:"
    echo "• Sessions auto-save every 15 minutes"
    echo "• Restore with 'tmux resurrect'"
    echo "• Configured in your .tmux.conf"
    
    print_step "5" "Git integration"
    echo "Enhanced git workflow:"
    print_command "git status"
    echo ""
    echo "Your git config includes delta for better diffs!"
    
    wait_for_command "git status" "Try: git status"
    
    print_success "Advanced features explored!"
    
    wait_for_enter
}

lesson_10_graduation() {
    print_header
    print_lesson_header "Lesson 10: Graduation - You're Ready!"
    
    echo -e "${GREEN}${BOLD}🎓 Congratulations! You've completed the Dotfiles Tutorial! 🎓${NC}"
    echo ""
    echo -e "${BOLD}What you've learned:${NC}"
    echo "✅ Modern CLI tools (eza, bat, rg, fd, fzf)"
    echo "✅ Smart navigation with zoxide"
    echo "✅ Project management and switching"
    echo "✅ AI-powered development workflows"
    echo "✅ Tmux session management"
    echo "✅ Neovim multi-pane navigation"
    echo "✅ Complete development workflows"
    echo "✅ Advanced features and tips"
    echo ""
    echo -e "${BOLD}Quick Reference:${NC}"
    echo "• Modern tools: ls → eza, cat → bat, grep → rg, find → fd"
    echo "• Navigation: z/j for smart cd, fzf for fuzzy finding"
    echo "• Projects: proj function for switching, auto-detection"
    echo "• Tmux: ts/ta/tn/tk for session management"
    echo "• Neovim: <Space> leader key, <Leader>wp for window picker"
    echo "• AI: claude-context, ai-compare, explain functions"
    echo ""
    echo -e "${BOLD}Next Steps:${NC}"
    echo "1. Install Claude Code CLI: https://claude.ai/code"
    echo "2. Install Gemini CLI for multi-AI workflows"
    echo "3. Read NAVIGATION_GUIDE.md for complete reference"
    echo "4. Customize your configuration in ~/.zshrc and ~/.config/nvim/"
    echo "5. Check for updates with 'df-update'"
    echo ""
    echo -e "${BOLD}Documentation:${NC}"
    echo "• README.md - Overview and installation"
    echo "• NAVIGATION_GUIDE.md - Complete navigation reference"
    echo "• INSTALLATION_TEST.md - Cross-platform testing guide"
    echo "• CHANGELOG.md - Version history and updates"
    echo ""
    echo -e "${YELLOW}${BOLD}Keep Learning:${NC}"
    echo "• Practice daily with the tools you've learned"
    echo "• Explore the configuration files to understand how things work"
    echo "• Join the community and share your customizations"
    echo "• Run this tutorial again anytime with: ./dotfiles-tutor"
    echo ""
    
    print_step "Cleanup" "Remove tutorial practice files?"
    echo "The practice environment is at: $TUTORIAL_DIR"
    echo "Would you like to keep it for further practice? (y/n)"
    read -r keep_files
    
    if [[ "$keep_files" =~ ^[Nn]$ ]]; then
        rm -rf "$TUTORIAL_DIR"
        print_success "Practice files cleaned up!"
    else
        print_success "Practice files kept at $TUTORIAL_DIR"
    fi
    
    echo ""
    echo -e "${BLUE}${BOLD}Thank you for completing the Dotfiles Tutorial!${NC}"
    echo -e "${GREEN}${BOLD}Happy coding with your modern development environment! ${ROCKET}${NC}"
    echo ""
}

# ============================================================================
# Tutorial Menu and Main Loop
# ============================================================================

show_menu() {
    print_header
    echo -e "${BOLD}Choose a lesson to start or continue:${NC}"
    echo ""
    echo "1.  Welcome and Setup"
    echo "2.  Modern CLI Tools"
    echo "3.  Smart Navigation"
    echo "4.  Project Management"
    echo "5.  AI Integration"
    echo "6.  Tmux Sessions"
    echo "7.  Neovim Navigation"
    echo "8.  Development Workflow"
    echo "9.  Advanced Features"
    echo "10. Graduation"
    echo ""
    echo "0.  Exit Tutorial"
    echo ""
    echo -n "Enter lesson number (1-10): "
}

run_lesson() {
    case $1 in
        1) lesson_01_welcome ;;
        2) lesson_02_modern_cli ;;
        3) lesson_03_smart_navigation ;;
        4) lesson_04_project_management ;;
        5) lesson_05_ai_integration ;;
        6) lesson_06_tmux_sessions ;;
        7) lesson_07_neovim_navigation ;;
        8) lesson_08_development_workflow ;;
        9) lesson_09_advanced_features ;;
        10) lesson_10_graduation ;;
        0) exit 0 ;;
        *) echo "Invalid lesson number. Please choose 1-10 or 0 to exit." ;;
    esac
}

main() {
    # Check if dotfiles are installed
    if [[ ! -f "$HOME/.zshrc" ]] || ! command -v starship >/dev/null 2>&1; then
        print_header
        echo -e "${RED}${BOLD}Dotfiles not detected!${NC}"
        echo ""
        echo "This tutorial requires the modern dotfiles to be installed."
        echo "Please run the installation first:"
        echo ""
        echo "  bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/codeswiftr/dotfiles/master/install.sh)\""
        echo ""
        exit 1
    fi
    
    while true; do
        show_menu
        read -r choice
        echo ""
        run_lesson "$choice"
    done
}

# Run the tutorial
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi