---
name: Dotfiles Testing

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

jobs:
  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          brew install python3 shellcheck yamllint ripgrep || true
          pip3 install --user pyyaml || true

      - name: Run infrastructure tests (agent mode)
        run: |
          chmod +x tests/test_runner.sh
          DOTFILES_MODE=agent ./tests/test_runner.sh --category infrastructure
        env:
          PATH: "$HOME/.local/bin:${{ env.PATH }}"
      - name: Verify Neovim startup targets (Tier 1/2)
        run: |
          brew install neovim || true
          # Tier 1 < 400ms on shared runners (allow headroom) and Tier 2 < 800ms
          T1=$(NVIM_TIER=1 nvim --headless --startuptime /tmp/nvim-startup.log -c 'qa' >/dev/null 2>&1 || true; tail -1 /tmp/nvim-startup.log | grep -oE '[0-9]+\.[0-9]+' || echo 9999)
          echo "Tier1 ms: $T1"
          python3 - <<'PY'
import sys
try:
  t1=float("$T1")
  assert t1 < 400.0
except Exception:
  sys.exit(1)
PY
          T2=$(NVIM_TIER=2 nvim --headless --startuptime /tmp/nvim-startup2.log -c 'qa' >/dev/null 2>&1 || true; tail -1 /tmp/nvim-startup2.log | grep -oE '[0-9]+\.[0-9]+' || echo 9999)
          echo "Tier2 ms: $T2"
          python3 - <<'PY'
import sys
try:
  t2=float("$T2")
  assert t2 < 800.0
except Exception:
  sys.exit(1)
PY
      - name: Validate docs index consistency
        run: |
          bash scripts/generate-index.sh
          git diff --exit-code docs/INDEX.md docs/index.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-macos
          path: tests/results/

  test-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip zsh tmux git

      - name: Run infrastructure tests (agent mode)
        run: |
          chmod +x tests/test_runner.sh
          DOTFILES_MODE=agent ./tests/test_runner.sh --category infrastructure
        env:
          PATH: "$HOME/.local/bin:${{ env.PATH }}"
      - name: Verify Neovim startup targets (Tier 1/2)
        run: |
          sudo apt-get update && sudo apt-get install -y neovim || true
          T1=$(NVIM_TIER=1 nvim --headless --startuptime /tmp/nvim-startup.log -c 'qa' >/dev/null 2>&1 || true; tail -1 /tmp/nvim-startup.log | grep -oE '[0-9]+\.[0-9]+' || echo 9999)
          echo "Tier1 ms: $T1"
          python3 - <<'PY'
import sys
try:
  t1=float("$T1")
  assert t1 < 500.0
except Exception:
  sys.exit(1)
PY
          T2=$(NVIM_TIER=2 nvim --headless --startuptime /tmp/nvim-startup2.log -c 'qa' >/dev/null 2>&1 || true; tail -1 /tmp/nvim-startup2.log | grep -oE '[0-9]+\.[0-9]+' || echo 9999)
          echo "Tier2 ms: $T2"
          python3 - <<'PY'
import sys
try:
  t2=float("$T2")
  assert t2 < 900.0
except Exception:
  sys.exit(1)
PY
      - name: Validate docs index consistency
        run: |
          bash scripts/generate-index.sh
          git diff --exit-code docs/INDEX.md docs/index.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu
          path: tests/results/

  test-installation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test minimal installation
        run: |
          chmod +x install.sh
          ./install.sh --dry-run install minimal

      - name: Test standard installation
        run: ./install.sh --dry-run install standard

      - name: Test full installation
        run: ./install.sh --dry-run install full

      - name: Test health check
        run: |
          if [[ -f "scripts/health-check.sh" ]]; then
            chmod +x scripts/health-check.sh
            ./scripts/health-check.sh
          fi

  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run security checks
        run: |
          sudo apt-get update && sudo apt-get install -y ripgrep || true
          # Check for potential secrets in tracked files
          if rg -n "password|secret|api[_-]?key|private[_-]?key" \
            --glob '!tests/**' --glob '!docs/**' --glob '!**/*.md'; then
            echo "Potential sensitive data found" && exit 1
          fi

          # Ensure shell scripts are executable
          if find . -name "*.sh" -not -path './tests/*' -exec test -x {} \; | grep -q .; then
            echo "Some shell scripts are not executable" && exit 1
          fi

          # Block obviously dangerous commands (narrow to remove root path specifically and ignore documented examples)
          if rg -n "rm\s+-rf\s+/\s*$" --glob '!tests/**' --glob '!docs/**' --glob '!.github/**' .; then
            echo "Dangerous rm command found" && exit 1
          fi

  lint-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install linters
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck python3-pip
          pip3 install --user yamllint

      - name: Run shellcheck (errors only)
        run: |
          set -o pipefail
          # Skip non-bash/zsh files
          mapfile -t files < <(git ls-files '*.sh')
          for f in "${files[@]}"; do
            shebang=$(head -1 "$f" || true)
            case "$shebang" in
              *osascript*) continue ;;
              *zsh*) shellcheck -S error "$f" || true; continue ;;
              *) shellcheck -S error "$f" || true ;;
            esac
          done

      - name: Run yamllint
        run: |
          if [[ -f .yamllint ]]; then
            yamllint -s .
          else
            yamllint -d '{extends: default, rules: {line-length: {max: 150}, truthy: disable}}' -s .
          fi
      - name: Ensure newline at EOF for workflow
        run: |
          printf "\n" >> .github/workflows/test.yml

  cross-platform-check:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Cross-platform smoke
        run: |
          chmod +x install.sh
          ./install.sh --dry-run profiles
          if [[ -f "scripts/health-check.sh" ]]; then
            chmod +x scripts/health-check.sh
            ./scripts/health-check.sh || true
          fi

  security-audit-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run lightweight security scan (non-blocking)
        run: |
          chmod +x bin/dot || true
          DOTFILES_MODE=agent ./bin/dot security scan --format json --quiet > security-scan.json || true

      - name: Optionally gate on findings
        run: |
          chmod +x scripts/security/gate.sh || true
          SECURITY_FAIL_ON=${{ vars.SECURITY_FAIL_ON || 'false' }} scripts/security/gate.sh security-scan.json || true

      - name: Summarize results to job summary
        run: |
          chmod +x scripts/security/summary.sh || true
          if [[ -f security-scan.json ]]; then
            scripts/security/summary.sh security-scan.json > security-scan.md || true
            cat security-scan.md >> "$GITHUB_STEP_SUMMARY" || true
          else
            echo "Security scan JSON not found" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload security scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan
          path: |
            security-scan.json
            security-scan.md

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ -f security-scan.md ]]; then
            gh pr comment ${{ github.event.pull_request.number }} --body-file security-scan.md || true
          fi