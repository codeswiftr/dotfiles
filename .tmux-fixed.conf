# ============================================================================
# FIXED Tmux Configuration - Essential Functions Restored
# Resolves critical keybinding conflicts while maintaining tool access
# ============================================================================

# ----- Configuration Directory Setup -----
TMUX_CONFIG_DIR="$HOME/dotfiles/config/tmux"

# ----- Core Settings -----
source-file "$TMUX_CONFIG_DIR/core-simple.conf"

# ----- ESSENTIAL KEYBINDINGS (NO CONFLICTS) -----

# Change prefix to Ctrl-a (more ergonomic than Ctrl-b)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# ============================================================================
# CORE WINDOW/PANE MANAGEMENT (FIXED)
# ============================================================================

# CRITICAL FIX: Restore essential tmux functions
unbind c
unbind d
bind c new-window -c "#{pane_current_path}" \; display "New window created"
bind d detach-client \; display "Session detached"

# Window and pane operations
bind | split-window -h -c "#{pane_current_path}" \; display "Split horizontal"
bind - split-window -v -c "#{pane_current_path}" \; display "Split vertical"
bind x confirm-before -p "Kill pane? (y/n)" kill-pane

# Pane navigation (vim-style)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Quick pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# ============================================================================
# SESSION MANAGEMENT
# ============================================================================

bind s choose-session \; display "Session picker"
bind '$' command-prompt -I "#S" "rename-session -- '%%'"
bind r source-file ~/.tmux.conf \; display "Config reloaded!"

# ============================================================================
# COPY/PASTE WORKFLOW (FIXED)
# ============================================================================

# Enable mouse support
set -g mouse on

# Copy mode bindings
bind [ copy-mode
bind ] paste-buffer

# Vi-style copy mode
setw -g mode-keys vi
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

# Mouse copy to system clipboard
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Quick copy last command output
bind C-c run-shell "tmux capture-pane -p | pbcopy" \; display "Pane copied to clipboard"

# ============================================================================
# ORGANIZED TOOL ACCESS (NO CONFLICTS)
# ============================================================================

# AI Tools Menu (Ctrl-a + A)
bind A display-menu -T "#[align=centre]AI Tools" -x C -y C \
    "Claude Interactive" c { new-window -n "Claude" "claude --interactive" } \
    "Aider (AI Assistant)" a { new-window -n "Aider" "aider" } \
    "Gemini Chat" g { new-window -n "Gemini" "gemini --interactive" } \
    "AI Code Review" r { new-window -n "AI-Review" "ai-review-branch" } \
    "AI Documentation" d { new-window -n "AI-Docs" "ai-analyze documentation" } \
    '' \
    "Cancel" q {}

# Development Tools Menu (Ctrl-a + D)  
bind D display-menu -T "#[align=centre]Development Tools" -x C -y C \
    "Docker Compose" d { new-window -n "Docker" "docker compose up" } \
    "FastAPI Dev" f { new-window -n "FastAPI" "fastapi dev" } \
    "Node Dev Server" n { new-window -n "Node" "bun run dev || npm run dev" } \
    "Python REPL" p { new-window -n "Python" "python" } \
    "File Explorer" e { new-window -n "Files" "ranger || lf || eza --tree" } \
    '' \
    "Cancel" q {}

# Testing Tools Menu (Ctrl-a + T)
bind T display-menu -T "#[align=centre]Testing Tools" -x C -y C \
    "Pytest Watch" p { new-window -n "Pytest" "pytest-watch" } \
    "Playwright UI" w { new-window -n "Playwright" "bunx playwright test --ui" } \
    "Bruno API Tests" b { new-window -n "Bruno" "bruno" } \
    "K6 Load Tests" k { new-window -n "K6" "k6 run loadtest.js" } \
    "Test All" a { new-window -n "Test-All" "test-all" } \
    '' \
    "Cancel" q {}

# Git Tools Menu (Ctrl-a + G)
bind G display-menu -T "#[align=centre]Git Tools" -x C -y C \
    "Git Status" s { new-window -n "Git-Status" "git status && echo 'Press enter to continue...' && read" } \
    "Git Log" l { new-window -n "Git-Log" "git log --oneline --graph --all" } \
    "Git Interactive" i { new-window -n "Git" "git status && bash" } \
    '' \
    "Cancel" q {}

# Monitoring Tools (Ctrl-a + M)
bind M display-menu -T "#[align=centre]Monitoring" -x C -y C \
    "System Monitor" h { new-window -n "Htop" "htop" } \
    "Process Monitor" p { new-window -n "Processes" "ps aux | head -20 && read" } \
    "Network Monitor" n { new-window -n "Network" "netstat -tuln && read" } \
    '' \
    "Cancel" q {}

# ============================================================================
# WINDOW NAVIGATION
# ============================================================================

# Window navigation
bind -r C-h previous-window
bind -r C-l next-window
bind Tab last-window

# Quick window selection
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9
bind 0 select-window -t 10

# ============================================================================
# HELP AND DISCOVERY
# ============================================================================

bind ? new-window -n "HELP" 'cat << "EOF"

ðŸš€ STREAMLINED TMUX COMMANDS

ESSENTIAL OPERATIONS (FIXED):
  Ctrl-a c     New window (WORKING!)
  Ctrl-a d     Detach session (WORKING!)
  Ctrl-a x     Close pane
  Ctrl-a |     Split horizontally  
  Ctrl-a -     Split vertically

NAVIGATION:
  Ctrl-a h/j/k/l    Navigate panes (vim-style)
  Ctrl-a H/J/K/L    Resize panes (hold Ctrl)
  Ctrl-a Tab        Last window
  Ctrl-a 1-9        Go to window number

COPY/PASTE (WORKING):
  Ctrl-a [     Enter copy mode
  v            Start selection (in copy mode)
  y            Copy to clipboard (in copy mode)
  Ctrl-a ]     Paste
  Mouse drag   Copy selection to clipboard

TOOL MENUS (NO CONFLICTS):
  Ctrl-a A     AI Tools (Claude, Aider, Gemini)
  Ctrl-a D     Dev Tools (Docker, FastAPI, Node)
  Ctrl-a T     Testing (Pytest, Playwright, Bruno)
  Ctrl-a G     Git Tools (Status, Log, Interactive)
  Ctrl-a M     Monitoring (Htop, Processes)

SESSION MANAGEMENT:
  Ctrl-a s     Session picker
  Ctrl-a $     Rename session
  Ctrl-a r     Reload config

HELP:
  Ctrl-a ?     This help screen

Press q to close this help.

EOF
read'

# ============================================================================
# THEME AND VISUAL SETTINGS
# ============================================================================

source-file "$TMUX_CONFIG_DIR/theme.conf"

# ============================================================================
# PLUGINS (MINIMAL)
# ============================================================================

# Plugin manager
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'catppuccin/tmux'

# Plugin settings
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'

# Theme settings
set -g @catppuccin_flavour 'mocha'
set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " â–ˆ"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_status_modules_right "directory session"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator ""
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"

# ============================================================================
# PLUGIN MANAGER INITIALIZATION
# ============================================================================

# Install tpm if it doesn't exist
if-shell "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tmp ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize plugin manager (keep at bottom)
run '~/.tmux/plugins/tpm/tpm'

# ============================================================================
# STARTUP MESSAGE
# ============================================================================

display-message "ðŸš€ Fixed Tmux loaded! Ctrl-a c=new window, Ctrl-a d=detach, Ctrl-a ?=help"