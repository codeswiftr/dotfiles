#!/usr/bin/env bash
set -euo pipefail

# Unified commit-msg hook runner (global)
# Behavior:
# - Prefer commitizen (cz) conventional commit validation
# - Fallback to pre-commit commit-msg hooks if configured
# - Else, warn and allow

COMMIT_MSG_FILE="$1"
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$REPO_ROOT"

# 1) commitizen if available (fast, zero-config default rules)
if command -v cz >/dev/null 2>&1; then
  if cz check --commit-msg-file "$COMMIT_MSG_FILE" >/dev/null 2>&1; then
    exit 0
  else
    echo "[commit-msg] Commitizen check failed. Use conventional commits (e.g., feat: add x)." 1>&2
    exit 1
  fi
fi

# 2) pre-commit commit-msg stage
if command -v pre-commit >/dev/null 2>&1; then
  if [ -f ".pre-commit-config.yaml" ] || [ -f ".pre-commit-config.yml" ] || [ -f "/Users/bogdan/dotfiles/pre-commit-global.yaml" ]; then
    # pre-commit handles staged input; for commit-msg, it inspects $1 via hooks that declare stages: [commit-msg]
    if [ -f ".pre-commit-config.yaml" ] || [ -f ".pre-commit-config.yml" ]; then
      PRE_COMMIT_COLOR=always pre-commit run --hook-stage commit-msg --color always
      exit $?
    else
      PRE_COMMIT_COLOR=always pre-commit run --hook-stage commit-msg --color always \
        --config "/Users/bogdan/dotfiles/pre-commit-global.yaml"
      exit $?
    fi
  fi
fi

echo "[commit-msg] No commit message validator found (cz/pre-commit). Proceeding." 1>&2
exit 0


